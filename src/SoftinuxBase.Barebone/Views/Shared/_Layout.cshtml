@*
    Copyright © 2017 SOFTINUX. All rights reserved.
    Licensed under the MIT License, Version 2.0. See License.txt in the project root for license information.
*@

@using Microsoft.Extensions.Options;
@using SoftinuxBase.Infrastructure
@using SoftinuxBase.Barebone.Tools;
@inject IOptions<CorporateConfiguration> OptionsApplicationConfiguration

@{
    var wrapperClass="wrapper";
    var htmlStyle="";
    var authClass = "sidebar-mini";
    if (!User.Identity.IsAuthenticated)
    {
        wrapperClass="login-box";
        htmlStyle="height: auto;";
        authClass = "login-page";
    }
}

<!DOCTYPE html>
<html lang="en" style="@htmlStyle">
    <head>
        <meta charset="utf-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>@Html.Raw(ViewBag.Title as string)</title>
        @await Component.InvokeAsync("StyleSheets")
        @await RenderSectionAsync("Styles", false)
    </head>
@{
    // use typed "properties" variable else the compiler isn't able to understand the LINQ expression.
    System.Reflection.PropertyInfo[] properties = Model?.GetType().GetProperties();
    bool hasModelWithErrorMessageProperty = properties != null && properties.Any(p_ => p_.Name.Equals("ErrorMessage"));
}
    <body class="@authClass">
    @if (Html.IsDebug() & User.Identity.IsAuthenticated)
    {
        <partial name="_IsDebugBanner"/>
    }
    <div class="@wrapperClass">
    @if (User.Identity.IsAuthenticated)
    {
        <partial name="_Navbar"/>
        <partial name="_Sidebar" model="OptionsApplicationConfiguration"/>
        @* Content Wrapper. Contains page content *@
        <div class="content-wrapper">
            @* Content Header (Page header) *@
            <section class="content-header">
                <div class="container-fluid">
                    <div class="row mb-2">
                        <div class="col-sm-6">
                            <h1>@await RenderSectionAsync("title", false)</h1>
                        </div>
                        <div class="col-sm-6">
                            <ol class="breadcrumb float-sm-right">
                                @* here breadcrumb items *@
                            </ol>
                        </div>
                    </div>
                </div>
            </section>
            @* Main content *@
            <section class="content">
                <div class="container-fluid">
                    @RenderBody()
                </div>
            </section>
            @* /.content *@
        </div>
        <aside class="control-sidebar control-sidebar-dark">
            <!-- Control sidebar content goes here -->
            <div class="p-3">
                <a href="@Url.Action("SignOut", "Account")"><i class="fas fa-power-off"></i> Logout</a>
            </div>
        </aside>
        <partial name="_Footer"/>
    }
    else
    {
        @RenderBody()
    }

    @* Error Message On SignIn or other action Fail *@
    @if (Model != null && hasModelWithErrorMessageProperty && !String.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div id="notification" class="show">
            <div class="alert alert-danger" role="alert">
                <i class="icon fa fa-ban"></i><strong>ERROR:</strong>&nbsp;@Html.Raw(Model.ErrorMessage)
            </div>
        </div>
    }
</div>
@await Component.InvokeAsync("Scripts")
@if (User.Identity.IsAuthenticated)
{
    @await RenderSectionAsync("Scripts", false)
}
else
{
    <script type="text/javascript">
        $("input").keypress(function (event) {
            if (event.which == 13) {
                event.preventDefault();
                $("form").submit();
            }
        });
    </script>
    @await RenderSectionAsync("ScriptsUnauthenticated", false)
}
</body>
</html>
