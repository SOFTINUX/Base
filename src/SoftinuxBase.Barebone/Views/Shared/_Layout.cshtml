@*
Copyright © 2017 SOFTINUX. All rights reserved.
Licensed under the MIT License, Version 2.0. See License.txt in the project root for license information.
*@

@using Microsoft.Extensions.Options;
@using Microsoft.EntityFrameworkCore.Storage.ValueConversion
@using SoftinuxBase.Security.Data.Entities
@using SoftinuxBase.Infrastructure
@inject IOptions<CorporateConfiguration> OptionsApplicationConfiguration

<!DOCTYPE html>
<html @if (!User.Identity.IsAuthenticated) { @Html.Raw("class=\"login-page\"")}>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>@Html.Raw(ViewBag.Title as string)</title>
    @await Component.InvokeAsync("StyleSheets")
    @RenderSection("Styles", false)
     <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">
</head>
@{
    string authClass="";
    authClass = !User.Identity.IsAuthenticated ? "hold-transition login-page" : "hold-transition skin-blue sidebar-mini";
    // use typed "properties" variable else the compiler isn't able to understand the LINQ expression.
    System.Reflection.PropertyInfo[] properties = Model?.GetType().GetProperties();
    bool hasModelWithErrorMessageProperty = properties != null && properties.Where(p => p.Name.Equals("ErrorMessage")).Any();
}
<body class="@authClass">
    <div class="wrapper" @if (!User.Identity.IsAuthenticated){ @Html.Raw("style=\"background-image: url('" + OptionsApplicationConfiguration.Value.LoginBackgroundImage + "'); background-size: cover;\"")}>
        @if (User.Identity.IsAuthenticated)
        {
            @* Main Header *@
            <header class="main-header">
                @* Logo *@
                <a href="#" class="logo">
                    @* mini logo for sidebar mini 50x50 pixels *@
                    <span class="logo-mini"><img src="/img/@Html.Raw(OptionsApplicationConfiguration.Value.BrandLogo)" class="brandlogo-image" alt="Brand Logo"></span>
                    @* logo for regular state and mobile devices *@
                    <span class="logo-lg"><img src="/img/@Html.Raw(OptionsApplicationConfiguration.Value.BrandLogo)" class="brandlogo-image" alt="Brand Logo"><strong>@Html.Raw(OptionsApplicationConfiguration.Value.Name)</strong></span>
                </a>

                @* Header Navbar *@
                <nav class="navbar navbar-static-top" role="navigation">
                    @* Sidebar toggle button *@
                    <a href="#" class="sidebar-toggle" data-toggle="push-menu" role="button">
                        <span class="sr-only">Toggle navigation</span>
                    </a>
                    @* Navbar Right Menu *@
                    <div class="navbar-custom-menu">
                        <ul class="nav navbar-nav">
                            @Html.Partial("_UserBadge")
                            @* Control Sidebar Toggle Button *@
                            <li>
                                <a href="#" data-toggle="control-sidebar"><i class="fa fa-gears"></i></a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </header>

            @* Left side column. contains the logo and sidebar *@
            <aside class="main-sidebar">
                @* sidebar: style can be found in sidebar.less *@
                <section class="sidebar">
                    @* Sidebar Menu *@
                    <ul class="sidebar-menu tree" data-widget="tree">
                        @* <li class="header">HEADER</li> *@
                        @await Component.InvokeAsync("Menu")
                    </ul>
                    @* /.sidebar-menu *@
                </section>
                @* /.sidebar *@
            </aside>

            @* Content Wrapper. Contains page content *@
            <div class="content-wrapper">
                @* Content Header (Page header) *@
                <section class="content-header">
                    <h1>
                        @RenderSection("title", false)
                        @*<small></small>*@
                    </h1>
                </section>
                @* Main content *@
                <section class="content container-fluid">
                    @RenderBody()
                </section>
                @* /.content *@
            </div>
        }
        else
        {
            @RenderBody()
        }

        @* Error Message On SignIn or other action Fail *@
        @if (Model != null && hasModelWithErrorMessageProperty && !String.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div id="notification" class="show">
                <div class="alert alert-danger" role="alert">
                    <i class="icon fa fa-ban"></i><strong>ERROR:</strong>&nbsp;@Html.Raw(Model.ErrorMessage)
                </div>
            </div>
        }

        @if (User.Identity.IsAuthenticated)
        {
            @* Main Footer *@
            <footer class="main-footer">
                @* To the right *@
                <div class="pull-right hidden-xs">
                    DEMO
                </div>
                @* Default to the left *@
                <strong>Copyright &copy; 2017 <a href="about">SOFTINUX</a>.</strong> All rights reserved.
            </footer>
        }
    </div>
                                                               @await Component.InvokeAsync("Scripts")
                                                               @if (!User.Identity.IsAuthenticated)
    {
        <script type="text/javascript">
            $("input").keypress(function (event) {
                if (event.which == 13) {
                    event.preventDefault();
                    $("form").submit();
                }
            });
        </script>
    }
    @if (User.Identity.IsAuthenticated)
    {
        @RenderSection("Scripts", false)
    }
    @RenderSection("ScriptsUnauthenticated", false)
</body>
</html>