@* Copyright Â© 2017-2019 SOFTINUX. All rights reserved.
    Licensed under the MIT License, Version 2.0. See License.txt in the project root for license information.
*@

@using SoftinuxBase.Security.Permissions
@model SoftinuxBase.Security.ViewModels.Permissions.GrantViewModel

@Html.AntiForgeryToken()

@* 
  - table head : the role names
  - table row : the extension name and all its permission
  - the cells : the checkbox for the role-permission
 
 *@
@{
    var roleCount = Model.RoleNames.Count;
    <table class="table table-head-fixed">
        <thead>
        <tr>
            <th colspan="2"></th>
            @foreach (var roleName in Model.RoleNames)
            {
                <th>
                    @roleName
                </th>
            }
        </tr>
        </thead>
        <tbody>

        @foreach (var permissionsForExtension in Model.RolesWithPermissions)
        {
            <tr data-extension-id="@Html.Raw(permissionsForExtension.Key)">
                <td>
                    <i class="fas fa-cubes"></i>
                    <span>@Html.Raw(permissionsForExtension.Key)</span>
                </td>
                <td colspan="@(roleCount+1)"></td>
            </tr>
            @foreach (var permissionData in permissionsForExtension.Value)
            {
                <tr>
                    <td></td>
                    <td>
                        <div><i class="fas fa-key"></i>
                            @permissionData.Key.ShortName</div>
                        <div class="text-muted">@permissionData.Key.Description</div>
                    </td>
                    @foreach (var roleName in Model.RoleNames)
                    {
                        <td>
                            <input type="checkbox" checked="@permissionData.Value.Contains(roleName)">
                        </td>
                    }
                </tr>
            }
        }
        </tbody>
    </table>

    @*
        @{
            int i = 1;
            foreach (var item in Model.PermissionsByRoleAndExtension)
            {
                bool hasNotNeverPermission = false;
                @foreach (var kvpRolePermissions in from kvpRolePermissions in item.Value from permission in kvpRolePermissions.Value.Where(permission_ => permission_ != Permission.Never)
                    select kvpRolePermissions)
                {
                    hasNotNeverPermission = true;
                }

                if (hasNotNeverPermission)
                {
                    <div class="row extension-row accordion-toggle collapsed" data-extension-id="@Html.Raw(item.Key)" data-toggle="collapse" data-target=@Html.Raw("\"#extension" + i + "\"")>
                        <div class="col-lg-8 col-md-12 col-sm-12 col-xs-12">
                            <div class="row">
                                <div class="col-md-1 col-xs-1 table-extension-header"><i class="chevron fa fa-fw"></i></div>
                                <div class="col-md-3 col-xs-3 table-extension-header">@Html.Raw(item.Key)</div>
                            </div>
                            <div class="row collapse" id=@Html.Raw("\"extension" + i + "\"") onclick="StopAccordionsPropagation(event);">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                    @* html into roles list loop
                                    @foreach (var subitem in item.Value)
                                    {

                                        @if (!subitem.Value.Any() || subitem.Value.All(permission_ => permission_ == Permission.Never))
                                        {
                                            continue;
                                        }

                                        <div class="row" data-role-id="@Html.Raw(item.Key+ "_" + subitem.Key)">
                                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 cell-heigth-25" align="right">
                                                @if (item.Value.ElementAt(0).Key.Equals(subitem.Key))
                                                {@Html.Raw("Role name: ")}
                                            </div>
                                            @* Role name
                                            <div class="col-lg-2 col-md-3 col-sm-3 col-xs-4 cell-heigth-25 cell-role-row">@Html.Raw(subitem.Key)</div>
                                            @* admin checkbox
                                            <div class="col-lg-1 col-md-2 col-sm-2 col-xs-1 cell-heigth-25 cell-role-row">
                                                <label class="checkbox-container">
                                                    <input id="@Html.Raw(item.Key + "_" + subitem.Key + "_" + "ADMIN")" type="checkbox"
                                                           @if (subitem.Value.Contains(Permission.Admin)) { @Html.Raw("checked") } onclick="permissionCheckBoxClick(this)">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </div>
                                            @* write checkbox
                                            <div class="col-lg-1 col-md-2 col-sm-2 col-xs-1 cell-heigth-25 cell-role-row">
                                                <label class="checkbox-container">
                                                    <input id="@Html.Raw(item.Key + "_" + subitem.Key + "_" + "WRITE")" type="checkbox"
                                                           @if (subitem.Value.Contains(Permission.Write)) { @Html.Raw("checked") }
                                                           @if (subitem.Value.Contains(Permission.Admin)) { @Html.Raw("disabled=\"true\"") } onclick="permissionCheckBoxClick(this)">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </div>
                                            @* read checkbox
                                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1 cell-heigth-25 cell-role-row">
                                                <label class="checkbox-container">
                                                    <input id="@Html.Raw(item.Key + "_" + subitem.Key + "_" + "READ")" type="checkbox"
                                                           @if (subitem.Value.Contains(Permission.Read)) { @Html.Raw("checked") }
                                                           @if (subitem.Value.Contains(Permission.Write)) { @Html.Raw("disabled=\"true\"") } onclick="permissionCheckBoxClick(this)">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </div>
                                            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1 cell-heigth-25 cell-role-row unlink-role" onclick="removeRoleLink(this)"></div>
                                        </div>
                                    }
                                </div>
                            </div>
                            @* end loop roles list
                        </div>
                    </div>
                    ++i;
                }

            } *@
    @* End extension list loop*@
}