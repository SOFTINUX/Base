// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace WebApplication.Migrations
{
    [DbContext(typeof(ApplicationStorageContext))]
    partial class ApplicationStorageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder_)
        {
#pragma warning disable 612, 618
            modelBuilder_
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b_ =>
                {
                    b_.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b_.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b_.Property<string>("Name")
                        .HasMaxLength(256);

                    b_.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b_.HasKey("Id");

                    b_.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b_.ToTable("AspNetRoles");
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b_ =>
                {
                    b_.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b_.Property<string>("ClaimType");

                    b_.Property<string>("ClaimValue");

                    b_.Property<string>("RoleId")
                        .IsRequired();

                    b_.HasKey("Id");

                    b_.HasIndex("RoleId");

                    b_.ToTable("AspNetRoleClaims");
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b_ =>
                {
                    b_.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b_.Property<string>("ClaimType");

                    b_.Property<string>("ClaimValue");

                    b_.Property<string>("UserId")
                        .IsRequired();

                    b_.HasKey("Id");

                    b_.HasIndex("UserId");

                    b_.ToTable("AspNetUserClaims");
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b_ =>
                {
                    b_.Property<string>("LoginProvider");

                    b_.Property<string>("ProviderKey");

                    b_.Property<string>("ProviderDisplayName");

                    b_.Property<string>("UserId")
                        .IsRequired();

                    b_.HasKey("LoginProvider", "ProviderKey");

                    b_.HasIndex("UserId");

                    b_.ToTable("AspNetUserLogins");
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b_ =>
                {
                    b_.Property<string>("UserId");

                    b_.Property<string>("RoleId");

                    b_.HasKey("UserId", "RoleId");

                    b_.HasIndex("RoleId");

                    b_.ToTable("AspNetUserRoles");
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b_ =>
                {
                    b_.Property<string>("UserId");

                    b_.Property<string>("LoginProvider");

                    b_.Property<string>("Name");

                    b_.Property<string>("Value");

                    b_.HasKey("UserId", "LoginProvider", "Name");

                    b_.ToTable("AspNetUserTokens");
                });

            modelBuilder_.Entity("SoftinuxBase.Security.Data.Entities.Permission", b_ =>
                {
                    b_.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b_.Property<string>("Name");

                    b_.HasKey("Id");

                    b_.ToTable("Permission");
                });

            modelBuilder_.Entity("SoftinuxBase.Security.Data.Entities.RolePermission", b_ =>
                {
                    b_.Property<string>("RoleId");

                    b_.Property<string>("PermissionId");

                    b_.Property<string>("Scope");

                    b_.HasKey("RoleId", "PermissionId", "Scope");

                    b_.HasIndex("PermissionId");

                    b_.ToTable("RolePermission");
                });

            modelBuilder_.Entity("SoftinuxBase.Security.Data.Entities.User", b_ =>
                {
                    b_.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b_.Property<int>("AccessFailedCount");

                    b_.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b_.Property<string>("Email")
                        .HasMaxLength(256);

                    b_.Property<bool>("EmailConfirmed");

                    b_.Property<DateTime>("FirstConnection");

                    b_.Property<string>("FirstName");

                    b_.Property<DateTime>("LastConnection");

                    b_.Property<string>("LastName");

                    b_.Property<bool>("LockoutEnabled");

                    b_.Property<DateTimeOffset?>("LockoutEnd");

                    b_.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b_.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b_.Property<string>("PasswordHash");

                    b_.Property<string>("PhoneNumber");

                    b_.Property<bool>("PhoneNumberConfirmed");

                    b_.Property<string>("SecurityStamp");

                    b_.Property<bool>("TwoFactorEnabled");

                    b_.Property<string>("UserName")
                        .HasMaxLength(256);

                    b_.HasKey("Id");

                    b_.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b_.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b_.ToTable("AspNetUsers");
                });

            modelBuilder_.Entity("SoftinuxBase.Security.Data.Entities.UserPermission", b_ =>
                {
                    b_.Property<string>("UserId");

                    b_.Property<string>("PermissionId");

                    b_.Property<string>("Scope");

                    b_.HasKey("UserId", "PermissionId", "Scope");

                    b_.HasIndex("PermissionId");

                    b_.ToTable("UserPermission");
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b_ =>
                {
                    b_.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b_ =>
                {
                    b_.HasOne("SoftinuxBase.Security.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b_ =>
                {
                    b_.HasOne("SoftinuxBase.Security.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b_ =>
                {
                    b_.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b_.HasOne("SoftinuxBase.Security.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder_.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b_ =>
                {
                    b_.HasOne("SoftinuxBase.Security.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder_.Entity("SoftinuxBase.Security.Data.Entities.RolePermission", b_ =>
                {
                    b_.HasOne("SoftinuxBase.Security.Data.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b_.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder_.Entity("SoftinuxBase.Security.Data.Entities.UserPermission", b_ =>
                {
                    b_.HasOne("SoftinuxBase.Security.Data.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b_.HasOne("SoftinuxBase.Security.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
